#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by esgdata.gfdl.noaa.gov - 2023/02/16 13:27:36
# Search URL: http://esgdata.gfdl.noaa.gov/esg-search/wget/?distrib=false&dataset_id=CMIP6.AerChemMIP.NOAA-GFDL.GFDL-ESM4.histSST-piAer.r1i1p1f1.Amon.rsutcs.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.AerChemMIP.NOAA-GFDL.GFDL-ESM4.histSST-piAer.r1i1p1f1.Amon.rlut.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.AerChemMIP.NOAA-GFDL.GFDL-ESM4.histSST-piAer.r1i1p1f1.Amon.rsut.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.AerChemMIP.NOAA-GFDL.GFDL-ESM4.histSST-piAer.r1i1p1f1.Amon.rsdt.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.AerChemMIP.NOAA-GFDL.GFDL-ESM4.histSST-piAer.r1i1p1f1.Amon.rsus.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.AerChemMIP.NOAA-GFDL.GFDL-ESM4.histSST-piAer.r1i1p1f1.Amon.rsds.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.AerChemMIP.NOAA-GFDL.GFDL-ESM4.histSST-piAer.r1i1p1f1.Amon.rlutcs.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.AerChemMIP.NOAA-GFDL.GFDL-ESM4.histSST-piAer.r1i1p1f1.Amon.clt.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.AerChemMIP.NOAA-GFDL.GFDL-ESM4.histSST.r1i1p1f1.Amon.rsut.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.AerChemMIP.NOAA-GFDL.GFDL-ESM4.histSST.r1i1p1f1.Amon.rsdt.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.AerChemMIP.NOAA-GFDL.GFDL-ESM4.histSST.r1i1p1f1.Amon.rsus.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.AerChemMIP.NOAA-GFDL.GFDL-ESM4.histSST.r1i1p1f1.Amon.rsds.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.AerChemMIP.NOAA-GFDL.GFDL-ESM4.histSST.r1i1p1f1.Amon.rsutcs.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.AerChemMIP.NOAA-GFDL.GFDL-ESM4.histSST.r1i1p1f1.Amon.rlut.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.AerChemMIP.NOAA-GFDL.GFDL-ESM4.histSST.r1i1p1f1.Amon.rlutcs.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.AerChemMIP.NOAA-GFDL.GFDL-ESM4.histSST.r1i1p1f1.Amon.clt.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-histaer.r3i1p1f1.Amon.rlut.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-histaer.r3i1p1f1.Amon.rsut.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-histaer.r3i1p1f1.Amon.rsdt.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-histaer.r3i1p1f1.Amon.rsus.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-histaer.r3i1p1f1.Amon.rsds.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-histaer.r3i1p1f1.Amon.rlutcs.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-histaer.r3i1p1f1.Amon.rsutcs.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-histaer.r3i1p1f1.Amon.clt.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-histaer.r1i1p1f1.Amon.rlut.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-histaer.r1i1p1f1.Amon.rsut.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-histaer.r1i1p1f1.Amon.rsdt.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-histaer.r1i1p1f1.Amon.rsus.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-histaer.r1i1p1f1.Amon.rsds.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-histaer.r1i1p1f1.Amon.rlutcs.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-histaer.r1i1p1f1.Amon.rsutcs.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-histaer.r1i1p1f1.Amon.clt.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-control.r1i1p1f1.Amon.clt.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-control.r1i1p1f1.Amon.rsut.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-control.r1i1p1f1.Amon.rsdt.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-control.r1i1p1f1.Amon.rsus.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-control.r1i1p1f1.Amon.rsds.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-control.r1i1p1f1.Amon.rsutcs.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-control.r1i1p1f1.Amon.rlut.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-control.r1i1p1f1.Amon.rlutcs.gr1.v20180701|esgdata.gfdl.noaa.gov
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='http://esgdata.gfdl.noaa.gov/esg-search/wget/?distrib=false&dataset_id=CMIP6.AerChemMIP.NOAA-GFDL.GFDL-ESM4.histSST-piAer.r1i1p1f1.Amon.rsutcs.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.AerChemMIP.NOAA-GFDL.GFDL-ESM4.histSST-piAer.r1i1p1f1.Amon.rlut.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.AerChemMIP.NOAA-GFDL.GFDL-ESM4.histSST-piAer.r1i1p1f1.Amon.rsut.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.AerChemMIP.NOAA-GFDL.GFDL-ESM4.histSST-piAer.r1i1p1f1.Amon.rsdt.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.AerChemMIP.NOAA-GFDL.GFDL-ESM4.histSST-piAer.r1i1p1f1.Amon.rsus.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.AerChemMIP.NOAA-GFDL.GFDL-ESM4.histSST-piAer.r1i1p1f1.Amon.rsds.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.AerChemMIP.NOAA-GFDL.GFDL-ESM4.histSST-piAer.r1i1p1f1.Amon.rlutcs.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.AerChemMIP.NOAA-GFDL.GFDL-ESM4.histSST-piAer.r1i1p1f1.Amon.clt.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.AerChemMIP.NOAA-GFDL.GFDL-ESM4.histSST.r1i1p1f1.Amon.rsut.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.AerChemMIP.NOAA-GFDL.GFDL-ESM4.histSST.r1i1p1f1.Amon.rsdt.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.AerChemMIP.NOAA-GFDL.GFDL-ESM4.histSST.r1i1p1f1.Amon.rsus.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.AerChemMIP.NOAA-GFDL.GFDL-ESM4.histSST.r1i1p1f1.Amon.rsds.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.AerChemMIP.NOAA-GFDL.GFDL-ESM4.histSST.r1i1p1f1.Amon.rsutcs.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.AerChemMIP.NOAA-GFDL.GFDL-ESM4.histSST.r1i1p1f1.Amon.rlut.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.AerChemMIP.NOAA-GFDL.GFDL-ESM4.histSST.r1i1p1f1.Amon.rlutcs.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.AerChemMIP.NOAA-GFDL.GFDL-ESM4.histSST.r1i1p1f1.Amon.clt.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-histaer.r3i1p1f1.Amon.rlut.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-histaer.r3i1p1f1.Amon.rsut.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-histaer.r3i1p1f1.Amon.rsdt.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-histaer.r3i1p1f1.Amon.rsus.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-histaer.r3i1p1f1.Amon.rsds.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-histaer.r3i1p1f1.Amon.rlutcs.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-histaer.r3i1p1f1.Amon.rsutcs.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-histaer.r3i1p1f1.Amon.clt.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-histaer.r1i1p1f1.Amon.rlut.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-histaer.r1i1p1f1.Amon.rsut.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-histaer.r1i1p1f1.Amon.rsdt.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-histaer.r1i1p1f1.Amon.rsus.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-histaer.r1i1p1f1.Amon.rsds.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-histaer.r1i1p1f1.Amon.rlutcs.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-histaer.r1i1p1f1.Amon.rsutcs.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-histaer.r1i1p1f1.Amon.clt.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-control.r1i1p1f1.Amon.clt.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-control.r1i1p1f1.Amon.rsut.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-control.r1i1p1f1.Amon.rsdt.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-control.r1i1p1f1.Amon.rsus.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-control.r1i1p1f1.Amon.rsds.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-control.r1i1p1f1.Amon.rsutcs.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-control.r1i1p1f1.Amon.rlut.gr1.v20180701|esgdata.gfdl.noaa.gov&dataset_id=CMIP6.RFMIP.NOAA-GFDL.GFDL-CM4.piClim-control.r1i1p1f1.Amon.rlutcs.gr1.v20180701|esgdata.gfdl.noaa.gov'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'clt_Amon_GFDL-ESM4_histSST-piAer_r1i1p1f1_gr1_185001-194912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/AerChemMIP/NOAA-GFDL/GFDL-ESM4/histSST-piAer/r1i1p1f1/Amon/clt/gr1/v20180701/clt_Amon_GFDL-ESM4_histSST-piAer_r1i1p1f1_gr1_185001-194912.nc' 'SHA256' 'e1308375c197bc6f77f6b25197bb16e02d10a37674c74e1deef7b9749e9a42e9'
'clt_Amon_GFDL-ESM4_histSST-piAer_r1i1p1f1_gr1_195001-201412.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/AerChemMIP/NOAA-GFDL/GFDL-ESM4/histSST-piAer/r1i1p1f1/Amon/clt/gr1/v20180701/clt_Amon_GFDL-ESM4_histSST-piAer_r1i1p1f1_gr1_195001-201412.nc' 'SHA256' '8ebfba4d5a0f0af16a31650f94376bb4d7ae6fc26453bbd010f108f3e7abcb9e'
'rlut_Amon_GFDL-ESM4_histSST-piAer_r1i1p1f1_gr1_185001-194912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/AerChemMIP/NOAA-GFDL/GFDL-ESM4/histSST-piAer/r1i1p1f1/Amon/rlut/gr1/v20180701/rlut_Amon_GFDL-ESM4_histSST-piAer_r1i1p1f1_gr1_185001-194912.nc' 'SHA256' 'b9057d39d840f31eb119b2a501a1faf88827296b42b6f2273ba8235a63d876e5'
'rlut_Amon_GFDL-ESM4_histSST-piAer_r1i1p1f1_gr1_195001-201412.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/AerChemMIP/NOAA-GFDL/GFDL-ESM4/histSST-piAer/r1i1p1f1/Amon/rlut/gr1/v20180701/rlut_Amon_GFDL-ESM4_histSST-piAer_r1i1p1f1_gr1_195001-201412.nc' 'SHA256' '1849779b0c9e3bf738f80ae545c6beba5a4bd61f6e3ff7c5cd3f986fcef107ea'
'rlutcs_Amon_GFDL-ESM4_histSST-piAer_r1i1p1f1_gr1_185001-194912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/AerChemMIP/NOAA-GFDL/GFDL-ESM4/histSST-piAer/r1i1p1f1/Amon/rlutcs/gr1/v20180701/rlutcs_Amon_GFDL-ESM4_histSST-piAer_r1i1p1f1_gr1_185001-194912.nc' 'SHA256' '8948299d8db4858b400c82bfcbdbf7743cf0a5ed99b329c51e4470a0c81f0c76'
'rlutcs_Amon_GFDL-ESM4_histSST-piAer_r1i1p1f1_gr1_195001-201412.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/AerChemMIP/NOAA-GFDL/GFDL-ESM4/histSST-piAer/r1i1p1f1/Amon/rlutcs/gr1/v20180701/rlutcs_Amon_GFDL-ESM4_histSST-piAer_r1i1p1f1_gr1_195001-201412.nc' 'SHA256' '91cae6b6bde4850e2a8e5cb5c1b7876dad9e451d3793774531229332ee72ce98'
'rsds_Amon_GFDL-ESM4_histSST-piAer_r1i1p1f1_gr1_185001-194912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/AerChemMIP/NOAA-GFDL/GFDL-ESM4/histSST-piAer/r1i1p1f1/Amon/rsds/gr1/v20180701/rsds_Amon_GFDL-ESM4_histSST-piAer_r1i1p1f1_gr1_185001-194912.nc' 'SHA256' '5923dd34a46a762761680ed0e08f9fd570dd1a08d167232fac5f8fedc2e81bb2'
'rsds_Amon_GFDL-ESM4_histSST-piAer_r1i1p1f1_gr1_195001-201412.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/AerChemMIP/NOAA-GFDL/GFDL-ESM4/histSST-piAer/r1i1p1f1/Amon/rsds/gr1/v20180701/rsds_Amon_GFDL-ESM4_histSST-piAer_r1i1p1f1_gr1_195001-201412.nc' 'SHA256' '32a369e0e1a7b1d57cce83c10b6b1f68aa12a734045e43f18a4ac85e1e7427c1'
'rsdt_Amon_GFDL-ESM4_histSST-piAer_r1i1p1f1_gr1_185001-194912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/AerChemMIP/NOAA-GFDL/GFDL-ESM4/histSST-piAer/r1i1p1f1/Amon/rsdt/gr1/v20180701/rsdt_Amon_GFDL-ESM4_histSST-piAer_r1i1p1f1_gr1_185001-194912.nc' 'SHA256' '40eea71cadda690985ee0706354d54fe7c70f5eb6d1ebb0476670de812c65f5c'
'rsdt_Amon_GFDL-ESM4_histSST-piAer_r1i1p1f1_gr1_195001-201412.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/AerChemMIP/NOAA-GFDL/GFDL-ESM4/histSST-piAer/r1i1p1f1/Amon/rsdt/gr1/v20180701/rsdt_Amon_GFDL-ESM4_histSST-piAer_r1i1p1f1_gr1_195001-201412.nc' 'SHA256' '146462ed154dadb6850c910bab7b3f37f9d7e37b813159920b1c84712e6521f9'
'rsus_Amon_GFDL-ESM4_histSST-piAer_r1i1p1f1_gr1_185001-194912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/AerChemMIP/NOAA-GFDL/GFDL-ESM4/histSST-piAer/r1i1p1f1/Amon/rsus/gr1/v20180701/rsus_Amon_GFDL-ESM4_histSST-piAer_r1i1p1f1_gr1_185001-194912.nc' 'SHA256' 'f2def34bd0ff39f1fa5c723ae41fec0a97f27854093713245bd3b19bd4fb71aa'
'rsus_Amon_GFDL-ESM4_histSST-piAer_r1i1p1f1_gr1_195001-201412.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/AerChemMIP/NOAA-GFDL/GFDL-ESM4/histSST-piAer/r1i1p1f1/Amon/rsus/gr1/v20180701/rsus_Amon_GFDL-ESM4_histSST-piAer_r1i1p1f1_gr1_195001-201412.nc' 'SHA256' 'df34c82dcebd1d9cc75393f15e4ee5873b82402644536705d54372726c3bd39b'
'rsut_Amon_GFDL-ESM4_histSST-piAer_r1i1p1f1_gr1_185001-194912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/AerChemMIP/NOAA-GFDL/GFDL-ESM4/histSST-piAer/r1i1p1f1/Amon/rsut/gr1/v20180701/rsut_Amon_GFDL-ESM4_histSST-piAer_r1i1p1f1_gr1_185001-194912.nc' 'SHA256' 'de0f25f49ce091cd196f4b8035d38afa9fbba3dabf444968b68ba380e20d0600'
'rsut_Amon_GFDL-ESM4_histSST-piAer_r1i1p1f1_gr1_195001-201412.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/AerChemMIP/NOAA-GFDL/GFDL-ESM4/histSST-piAer/r1i1p1f1/Amon/rsut/gr1/v20180701/rsut_Amon_GFDL-ESM4_histSST-piAer_r1i1p1f1_gr1_195001-201412.nc' 'SHA256' 'def3433fb3d3e297aa5b4cc50287e0e184a74a9fd2756155b322484ea1fd9599'
'rsutcs_Amon_GFDL-ESM4_histSST-piAer_r1i1p1f1_gr1_185001-194912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/AerChemMIP/NOAA-GFDL/GFDL-ESM4/histSST-piAer/r1i1p1f1/Amon/rsutcs/gr1/v20180701/rsutcs_Amon_GFDL-ESM4_histSST-piAer_r1i1p1f1_gr1_185001-194912.nc' 'SHA256' 'ec2d4b47aed6dfc6f97cb78f9c52fd4543e84be1228902c43a0db7d76be8ec02'
'rsutcs_Amon_GFDL-ESM4_histSST-piAer_r1i1p1f1_gr1_195001-201412.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/AerChemMIP/NOAA-GFDL/GFDL-ESM4/histSST-piAer/r1i1p1f1/Amon/rsutcs/gr1/v20180701/rsutcs_Amon_GFDL-ESM4_histSST-piAer_r1i1p1f1_gr1_195001-201412.nc' 'SHA256' 'a58ccf19f5b493288f4bd34268c71dd49421e9b950546012b0afb35e6f3d253a'
'clt_Amon_GFDL-ESM4_histSST_r1i1p1f1_gr1_185001-194912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/AerChemMIP/NOAA-GFDL/GFDL-ESM4/histSST/r1i1p1f1/Amon/clt/gr1/v20180701/clt_Amon_GFDL-ESM4_histSST_r1i1p1f1_gr1_185001-194912.nc' 'SHA256' '7c5d3386605d02d6555b52e126c36f1db0d0341e8351755872fa3dba44d6a211'
'clt_Amon_GFDL-ESM4_histSST_r1i1p1f1_gr1_195001-201412.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/AerChemMIP/NOAA-GFDL/GFDL-ESM4/histSST/r1i1p1f1/Amon/clt/gr1/v20180701/clt_Amon_GFDL-ESM4_histSST_r1i1p1f1_gr1_195001-201412.nc' 'SHA256' '1c38deb79b8764e4ddd94c9347bdc155a0bff48350496f9de9c3bd4ec49b1291'
'rlut_Amon_GFDL-ESM4_histSST_r1i1p1f1_gr1_185001-194912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/AerChemMIP/NOAA-GFDL/GFDL-ESM4/histSST/r1i1p1f1/Amon/rlut/gr1/v20180701/rlut_Amon_GFDL-ESM4_histSST_r1i1p1f1_gr1_185001-194912.nc' 'SHA256' 'da59b080efe82113fb28521896713b6798e99e7d7fe6794d084d4a13f10d875e'
'rlut_Amon_GFDL-ESM4_histSST_r1i1p1f1_gr1_195001-201412.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/AerChemMIP/NOAA-GFDL/GFDL-ESM4/histSST/r1i1p1f1/Amon/rlut/gr1/v20180701/rlut_Amon_GFDL-ESM4_histSST_r1i1p1f1_gr1_195001-201412.nc' 'SHA256' '7034f9e8a142275bcdcec8b902899ae3a0c2a87c8cc6da345878e7d0cb5e3055'
'rlutcs_Amon_GFDL-ESM4_histSST_r1i1p1f1_gr1_185001-194912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/AerChemMIP/NOAA-GFDL/GFDL-ESM4/histSST/r1i1p1f1/Amon/rlutcs/gr1/v20180701/rlutcs_Amon_GFDL-ESM4_histSST_r1i1p1f1_gr1_185001-194912.nc' 'SHA256' '05c57c78890a2b1bec9764cf87dcf90ea2f703c56a055dc0e84184e812d0e3c3'
'rlutcs_Amon_GFDL-ESM4_histSST_r1i1p1f1_gr1_195001-201412.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/AerChemMIP/NOAA-GFDL/GFDL-ESM4/histSST/r1i1p1f1/Amon/rlutcs/gr1/v20180701/rlutcs_Amon_GFDL-ESM4_histSST_r1i1p1f1_gr1_195001-201412.nc' 'SHA256' 'b4b8686c0d174c91a49933181d9807794ad54dfc0eeba4799ac2ccc71cba975e'
'rsds_Amon_GFDL-ESM4_histSST_r1i1p1f1_gr1_185001-194912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/AerChemMIP/NOAA-GFDL/GFDL-ESM4/histSST/r1i1p1f1/Amon/rsds/gr1/v20180701/rsds_Amon_GFDL-ESM4_histSST_r1i1p1f1_gr1_185001-194912.nc' 'SHA256' '7be44c226b1b6c6598a58c216d7bd662969955d1cd1af7053476456a3954ce37'
'rsds_Amon_GFDL-ESM4_histSST_r1i1p1f1_gr1_195001-201412.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/AerChemMIP/NOAA-GFDL/GFDL-ESM4/histSST/r1i1p1f1/Amon/rsds/gr1/v20180701/rsds_Amon_GFDL-ESM4_histSST_r1i1p1f1_gr1_195001-201412.nc' 'SHA256' '9b1c490dc30df8414b569cd94d3711dd8960aa6b408a18ac5f5400358ff319f2'
'rsdt_Amon_GFDL-ESM4_histSST_r1i1p1f1_gr1_185001-194912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/AerChemMIP/NOAA-GFDL/GFDL-ESM4/histSST/r1i1p1f1/Amon/rsdt/gr1/v20180701/rsdt_Amon_GFDL-ESM4_histSST_r1i1p1f1_gr1_185001-194912.nc' 'SHA256' 'cb48797e636133e0d9e2d8a0833ce9d24ee9922eafe3129d27b8ba399bb37f79'
'rsdt_Amon_GFDL-ESM4_histSST_r1i1p1f1_gr1_195001-201412.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/AerChemMIP/NOAA-GFDL/GFDL-ESM4/histSST/r1i1p1f1/Amon/rsdt/gr1/v20180701/rsdt_Amon_GFDL-ESM4_histSST_r1i1p1f1_gr1_195001-201412.nc' 'SHA256' '73d92416a2b4dd1095c0cee5330896053e8853b6044a45704d08706b0a3d035f'
'rsus_Amon_GFDL-ESM4_histSST_r1i1p1f1_gr1_185001-194912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/AerChemMIP/NOAA-GFDL/GFDL-ESM4/histSST/r1i1p1f1/Amon/rsus/gr1/v20180701/rsus_Amon_GFDL-ESM4_histSST_r1i1p1f1_gr1_185001-194912.nc' 'SHA256' '476fc16210b6ca4e6fd0f6cc39a4275ab3cccb080f9f5001cbbe9908cb0012e4'
'rsus_Amon_GFDL-ESM4_histSST_r1i1p1f1_gr1_195001-201412.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/AerChemMIP/NOAA-GFDL/GFDL-ESM4/histSST/r1i1p1f1/Amon/rsus/gr1/v20180701/rsus_Amon_GFDL-ESM4_histSST_r1i1p1f1_gr1_195001-201412.nc' 'SHA256' 'a8f271dd9a9d39a66b5eeaed2d544e917c40e3844b593e7f244a948ed73eef95'
'rsut_Amon_GFDL-ESM4_histSST_r1i1p1f1_gr1_185001-194912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/AerChemMIP/NOAA-GFDL/GFDL-ESM4/histSST/r1i1p1f1/Amon/rsut/gr1/v20180701/rsut_Amon_GFDL-ESM4_histSST_r1i1p1f1_gr1_185001-194912.nc' 'SHA256' '4a48608cffcd28d9292599e022e376e6fb285ffd0208157ef8fed82c401a32a3'
'rsut_Amon_GFDL-ESM4_histSST_r1i1p1f1_gr1_195001-201412.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/AerChemMIP/NOAA-GFDL/GFDL-ESM4/histSST/r1i1p1f1/Amon/rsut/gr1/v20180701/rsut_Amon_GFDL-ESM4_histSST_r1i1p1f1_gr1_195001-201412.nc' 'SHA256' 'ee50a2c7e79b69edcd2a8d807b770dd075259ae2606c6c18a4264f2741a531cf'
'rsutcs_Amon_GFDL-ESM4_histSST_r1i1p1f1_gr1_185001-194912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/AerChemMIP/NOAA-GFDL/GFDL-ESM4/histSST/r1i1p1f1/Amon/rsutcs/gr1/v20180701/rsutcs_Amon_GFDL-ESM4_histSST_r1i1p1f1_gr1_185001-194912.nc' 'SHA256' 'dd8f5d4900cf5ff7bfb2b940d134e12b6267a67b314fe272c6afe0bb52f7f842'
'rsutcs_Amon_GFDL-ESM4_histSST_r1i1p1f1_gr1_195001-201412.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/AerChemMIP/NOAA-GFDL/GFDL-ESM4/histSST/r1i1p1f1/Amon/rsutcs/gr1/v20180701/rsutcs_Amon_GFDL-ESM4_histSST_r1i1p1f1_gr1_195001-201412.nc' 'SHA256' '87918715f0b6adce9c55dfc67cbdb1282887bac15134aa8915a18c5673bedd2c'
'clt_Amon_GFDL-CM4_piClim-control_r1i1p1f1_gr1_000101-003012.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-control/r1i1p1f1/Amon/clt/gr1/v20180701/clt_Amon_GFDL-CM4_piClim-control_r1i1p1f1_gr1_000101-003012.nc' 'SHA256' 'c2a013ed70a6019d28197c6cb780b03e3584024e504f48510f97f4c0f3ba6002'
'rlut_Amon_GFDL-CM4_piClim-control_r1i1p1f1_gr1_000101-003012.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-control/r1i1p1f1/Amon/rlut/gr1/v20180701/rlut_Amon_GFDL-CM4_piClim-control_r1i1p1f1_gr1_000101-003012.nc' 'SHA256' 'ae61b592974ee61528fc0ad8b98defe06ed5bbfecb9a0626a2ce113f43a971ff'
'rlutcs_Amon_GFDL-CM4_piClim-control_r1i1p1f1_gr1_000101-003012.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-control/r1i1p1f1/Amon/rlutcs/gr1/v20180701/rlutcs_Amon_GFDL-CM4_piClim-control_r1i1p1f1_gr1_000101-003012.nc' 'SHA256' 'e8dbc301e1ab1650a4167d405429c42c2fc9528e01bf51eb29e41c8eb038cdaf'
'rsds_Amon_GFDL-CM4_piClim-control_r1i1p1f1_gr1_000101-003012.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-control/r1i1p1f1/Amon/rsds/gr1/v20180701/rsds_Amon_GFDL-CM4_piClim-control_r1i1p1f1_gr1_000101-003012.nc' 'SHA256' 'd0a3640329bab54587104081d1b1e026dc8f28cfbcb22c3ef4695ea1a0c432aa'
'rsdt_Amon_GFDL-CM4_piClim-control_r1i1p1f1_gr1_000101-003012.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-control/r1i1p1f1/Amon/rsdt/gr1/v20180701/rsdt_Amon_GFDL-CM4_piClim-control_r1i1p1f1_gr1_000101-003012.nc' 'SHA256' '34032043fda6e62d3ef8c19507f53f04f964e288ba005efb2cb0e1bb67e21a61'
'rsus_Amon_GFDL-CM4_piClim-control_r1i1p1f1_gr1_000101-003012.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-control/r1i1p1f1/Amon/rsus/gr1/v20180701/rsus_Amon_GFDL-CM4_piClim-control_r1i1p1f1_gr1_000101-003012.nc' 'SHA256' '0cd013d87813cf593a71da0cf3cd7476f6101dae5bfcbd65f2fa4035d74ded17'
'rsut_Amon_GFDL-CM4_piClim-control_r1i1p1f1_gr1_000101-003012.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-control/r1i1p1f1/Amon/rsut/gr1/v20180701/rsut_Amon_GFDL-CM4_piClim-control_r1i1p1f1_gr1_000101-003012.nc' 'SHA256' '69b8576ff18a4f2560c9f0faf55bf774c19e9d175c7513734de1396d02530720'
'rsutcs_Amon_GFDL-CM4_piClim-control_r1i1p1f1_gr1_000101-003012.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-control/r1i1p1f1/Amon/rsutcs/gr1/v20180701/rsutcs_Amon_GFDL-CM4_piClim-control_r1i1p1f1_gr1_000101-003012.nc' 'SHA256' 'c0f2eb9e6865d6741da961599614452baf1cc04037be578b1359f2864f00c396'
'clt_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_185001-194912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r1i1p1f1/Amon/clt/gr1/v20180701/clt_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_185001-194912.nc' 'SHA256' '44caaad6ff2afb4d94b035736b3c34c457244753607a36ef726d4469872547f5'
'clt_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_195001-204912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r1i1p1f1/Amon/clt/gr1/v20180701/clt_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_195001-204912.nc' 'SHA256' '74062fb6767148f615544fbe14d6e5a9cbe1bf70b238d71c209e7efbd94e17c0'
'clt_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_205001-209912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r1i1p1f1/Amon/clt/gr1/v20180701/clt_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_205001-209912.nc' 'SHA256' 'e1a89307c04f1ad388695d433851cd90520f2f9e8761c40569d273f05f6455ec'
'clt_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_210001-210012.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r1i1p1f1/Amon/clt/gr1/v20180701/clt_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_210001-210012.nc' 'SHA256' '56af507699993987c9cdc210ff86a5f979ff9ea3e75208625c1edc5067304fd6'
'rlut_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_185001-194912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r1i1p1f1/Amon/rlut/gr1/v20180701/rlut_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_185001-194912.nc' 'SHA256' '5710cc2599d077951c18abbcb08066212972a73d85d32b5cc23aebc0fcab69b1'
'rlut_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_195001-204912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r1i1p1f1/Amon/rlut/gr1/v20180701/rlut_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_195001-204912.nc' 'SHA256' '0a8df454b523a6502f25ea0607189b1a0c2c27d6aeefb3aa40c82a130fa75dc8'
'rlut_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_205001-209912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r1i1p1f1/Amon/rlut/gr1/v20180701/rlut_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_205001-209912.nc' 'SHA256' 'bfe680abfded9d4ee51ab6226930a56971222270e86cef9d24d081862eb95457'
'rlut_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_210001-210012.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r1i1p1f1/Amon/rlut/gr1/v20180701/rlut_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_210001-210012.nc' 'SHA256' '4b971d0e1264ce32d6356e982f9a08e6924a818640931f3aab16db6da0581170'
'rlutcs_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_185001-194912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r1i1p1f1/Amon/rlutcs/gr1/v20180701/rlutcs_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_185001-194912.nc' 'SHA256' 'ccf05fcc3e2cc459f6ffa1c2778c76da212a3f3db051abe4d713c2b3e8e32bec'
'rlutcs_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_195001-204912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r1i1p1f1/Amon/rlutcs/gr1/v20180701/rlutcs_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_195001-204912.nc' 'SHA256' '1ffcde7e832923a957cc0ced6d71e298fdc00f88e25a0bed0e5720eb19505f82'
'rlutcs_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_205001-209912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r1i1p1f1/Amon/rlutcs/gr1/v20180701/rlutcs_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_205001-209912.nc' 'SHA256' '9762b739d1265a0c609f7d74f44b88f0d55b5d735e29b47970d82ee57381075c'
'rlutcs_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_210001-210012.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r1i1p1f1/Amon/rlutcs/gr1/v20180701/rlutcs_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_210001-210012.nc' 'SHA256' '21aaaccafc8e0776611952b94a473dfce6c89b8a88d4ccb5299cf1c2945ec827'
'rsds_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_185001-194912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r1i1p1f1/Amon/rsds/gr1/v20180701/rsds_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_185001-194912.nc' 'SHA256' '7099269310c028376c2726f8eb69c3d15d9d8669c70adb9580ae9c2c53a20ea6'
'rsds_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_195001-204912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r1i1p1f1/Amon/rsds/gr1/v20180701/rsds_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_195001-204912.nc' 'SHA256' '39d96c2dfef45e0f03538e19a0c92e1ae974808ebb65e7f147074dbf0e9bbf31'
'rsds_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_205001-209912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r1i1p1f1/Amon/rsds/gr1/v20180701/rsds_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_205001-209912.nc' 'SHA256' '3167e6c418a27370c3ddfe5517e8075752f8a5d94beac8cf0862d8891ff3377c'
'rsds_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_210001-210012.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r1i1p1f1/Amon/rsds/gr1/v20180701/rsds_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_210001-210012.nc' 'SHA256' '8326513d5b3d8bd71ea017e3c1e04b21fb1a251b35dd00a1ce16322eae5737bf'
'rsdt_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_185001-194912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r1i1p1f1/Amon/rsdt/gr1/v20180701/rsdt_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_185001-194912.nc' 'SHA256' '935bf6e94cf9745c709529294567e1a0475e4554e470487a42a65b54c029e6a5'
'rsdt_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_195001-204912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r1i1p1f1/Amon/rsdt/gr1/v20180701/rsdt_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_195001-204912.nc' 'SHA256' '6a6ef5e4582d3800954020779ff37f5a0b8e819dd565895d3b411026d7d265f6'
'rsdt_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_205001-209912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r1i1p1f1/Amon/rsdt/gr1/v20180701/rsdt_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_205001-209912.nc' 'SHA256' '4dce414218938a75c5006e31489e5b61763f8cd2b08bc927770b3970d669cf19'
'rsdt_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_210001-210012.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r1i1p1f1/Amon/rsdt/gr1/v20180701/rsdt_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_210001-210012.nc' 'SHA256' '0e56d4480b7c3f541c4bf6ba39fceb5ae62620f6a9696d4566e37aeab6d21f7e'
'rsus_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_185001-194912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r1i1p1f1/Amon/rsus/gr1/v20180701/rsus_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_185001-194912.nc' 'SHA256' '7c74260b5d4d110f734db1e21549e7f60b6675983e9f220b96c23009604ebc89'
'rsus_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_195001-204912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r1i1p1f1/Amon/rsus/gr1/v20180701/rsus_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_195001-204912.nc' 'SHA256' '656c572f618486f9188722eb507817c79d02deef163861fc04ce4bac7872fe87'
'rsus_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_205001-209912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r1i1p1f1/Amon/rsus/gr1/v20180701/rsus_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_205001-209912.nc' 'SHA256' 'e6f661d7011b4583580b006ddef80a728c213e71bba8663c627ca0fa667ae2e5'
'rsus_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_210001-210012.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r1i1p1f1/Amon/rsus/gr1/v20180701/rsus_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_210001-210012.nc' 'SHA256' 'e1b912bed27cfe2cabb88da8fdfbf9c05bb127377a1973797fe0800102c0ccda'
'rsut_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_185001-194912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r1i1p1f1/Amon/rsut/gr1/v20180701/rsut_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_185001-194912.nc' 'SHA256' '04f52024d53a6f77827370e9e60238790d4bc0b4cc5f6855a319c33fd747575d'
'rsut_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_195001-204912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r1i1p1f1/Amon/rsut/gr1/v20180701/rsut_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_195001-204912.nc' 'SHA256' '586e7c9ad2d82663af6d2c239582e0868e8743acd368069f6730959c0fcd6063'
'rsut_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_205001-209912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r1i1p1f1/Amon/rsut/gr1/v20180701/rsut_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_205001-209912.nc' 'SHA256' '404c35c55233afb1bce174bca033340fbba8fae740028eca1bbf2c6c3feaa238'
'rsut_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_210001-210012.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r1i1p1f1/Amon/rsut/gr1/v20180701/rsut_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_210001-210012.nc' 'SHA256' '470856509ebbb40ae4d8095a8536039ee08a35f56a39236726d760a4bc8b4801'
'rsutcs_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_185001-194912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r1i1p1f1/Amon/rsutcs/gr1/v20180701/rsutcs_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_185001-194912.nc' 'SHA256' 'e325fd3f1fe86a850ea26d76f0644941f54b41349a1c08c06b7e2c532efdeeda'
'rsutcs_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_195001-204912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r1i1p1f1/Amon/rsutcs/gr1/v20180701/rsutcs_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_195001-204912.nc' 'SHA256' '95bb9f00e1dd9801ec7ec273a817d42b9a4d42fef5e52a00a32e04cfe9eb46e0'
'rsutcs_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_205001-209912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r1i1p1f1/Amon/rsutcs/gr1/v20180701/rsutcs_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_205001-209912.nc' 'SHA256' '7030105b08ffd2b43f93be14122ba8d316964ec3c021dcec69a4f4c45ea3e606'
'rsutcs_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_210001-210012.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r1i1p1f1/Amon/rsutcs/gr1/v20180701/rsutcs_Amon_GFDL-CM4_piClim-histaer_r1i1p1f1_gr1_210001-210012.nc' 'SHA256' '85ffa3b6dc17db10b3e13223405bf5a19e54a12e83851bf1e4c981a8196fdee0'
'clt_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_185001-194912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r3i1p1f1/Amon/clt/gr1/v20180701/clt_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_185001-194912.nc' 'SHA256' 'bb5618f98e8ac1aa52298e5d4348dd9bb0379159edabf03af9f34df165001983'
'clt_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_195001-204912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r3i1p1f1/Amon/clt/gr1/v20180701/clt_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_195001-204912.nc' 'SHA256' '5f97243901578a7788156cf7ae7fe9ba7b5ecaec1822e7146730c8e69506235e'
'clt_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_205001-209912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r3i1p1f1/Amon/clt/gr1/v20180701/clt_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_205001-209912.nc' 'SHA256' '45e7f5ff6776acfca38fbefafd76f2695aa4da259cef7c4e87bd2a94f25dcce2'
'clt_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_210001-210012.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r3i1p1f1/Amon/clt/gr1/v20180701/clt_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_210001-210012.nc' 'SHA256' '665e7c76a79d08faf25e39e93c958c532e04ee81bf6b44a0714e049d2b10137d'
'rlut_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_185001-194912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r3i1p1f1/Amon/rlut/gr1/v20180701/rlut_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_185001-194912.nc' 'SHA256' '4c40b8d5fb1abf08a1488d9d09b54b411660c5a92635d71813b5c3acf8197f56'
'rlut_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_195001-204912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r3i1p1f1/Amon/rlut/gr1/v20180701/rlut_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_195001-204912.nc' 'SHA256' '2798b9c30f3c2ed07331ff6fa02aaab73a4cf08602947074f98913dc7adbed88'
'rlut_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_205001-209912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r3i1p1f1/Amon/rlut/gr1/v20180701/rlut_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_205001-209912.nc' 'SHA256' 'e1e1b0bd73238bb111388180a6620ba668d1d28f52c0cafc8ae302d693a5678f'
'rlut_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_210001-210012.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r3i1p1f1/Amon/rlut/gr1/v20180701/rlut_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_210001-210012.nc' 'SHA256' 'c232ca30aab56d1ce1f22209a249f52eac1e7fe0825ed12e24663000204e08b7'
'rlutcs_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_185001-194912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r3i1p1f1/Amon/rlutcs/gr1/v20180701/rlutcs_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_185001-194912.nc' 'SHA256' '2577b78f990501b8a4c304e99944658d5102c313b304f25c5c828b814a5027ff'
'rlutcs_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_195001-204912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r3i1p1f1/Amon/rlutcs/gr1/v20180701/rlutcs_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_195001-204912.nc' 'SHA256' '7b7b6c5a750b5d3c515d1e0a35fe173f04cdb13949d20650aebc9cf13c7be118'
'rlutcs_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_205001-209912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r3i1p1f1/Amon/rlutcs/gr1/v20180701/rlutcs_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_205001-209912.nc' 'SHA256' '6ebc8cc7918972300fffd2487fa0a549e8ad788b67ac8a3544a3d249fd323d12'
'rlutcs_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_210001-210012.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r3i1p1f1/Amon/rlutcs/gr1/v20180701/rlutcs_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_210001-210012.nc' 'SHA256' '5956ad02586416b319af1c7eec86373d264465cacbad91ce9c1dac3029d14444'
'rsds_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_185001-194912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r3i1p1f1/Amon/rsds/gr1/v20180701/rsds_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_185001-194912.nc' 'SHA256' '3123c23004109ae94a0c4665bacaec61122d65f76aadc4b6dad9b2ccc0431b1e'
'rsds_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_195001-204912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r3i1p1f1/Amon/rsds/gr1/v20180701/rsds_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_195001-204912.nc' 'SHA256' 'e5bf8a6ef8006397fe762221837cd868c7ea0aa102c57dc72fd560baeb31acb1'
'rsds_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_205001-209912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r3i1p1f1/Amon/rsds/gr1/v20180701/rsds_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_205001-209912.nc' 'SHA256' '4196b394ae9da5c2ea1c26865ac97ded64ae94161c848063a0b4962542933963'
'rsds_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_210001-210012.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r3i1p1f1/Amon/rsds/gr1/v20180701/rsds_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_210001-210012.nc' 'SHA256' 'bc44913d853f3308a48f8912e95f22ca253b2c2d3c4c6235efd03f6d027ab81c'
'rsdt_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_185001-194912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r3i1p1f1/Amon/rsdt/gr1/v20180701/rsdt_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_185001-194912.nc' 'SHA256' '9152b818443689b94c3b2eac6bd6af191ad5461e9dad91147ee12ea5294f260c'
'rsdt_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_195001-204912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r3i1p1f1/Amon/rsdt/gr1/v20180701/rsdt_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_195001-204912.nc' 'SHA256' '63aabab3606c3b55e9ed7160ef5a15be15cf49fe3c2c8d87ff03f39865c569bb'
'rsdt_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_205001-209912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r3i1p1f1/Amon/rsdt/gr1/v20180701/rsdt_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_205001-209912.nc' 'SHA256' 'dd2d18ff8f6cb6603fbdbd18039ce521ba3785b74c37cefd273191646fe55c58'
'rsdt_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_210001-210012.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r3i1p1f1/Amon/rsdt/gr1/v20180701/rsdt_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_210001-210012.nc' 'SHA256' '036daa7ccfd2473668ae88f0c2b7f680c76cb862640a34491fa472ff146b32bd'
'rsus_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_185001-194912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r3i1p1f1/Amon/rsus/gr1/v20180701/rsus_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_185001-194912.nc' 'SHA256' '486d590d10f01759dc641052408df7db331bc66a8d5f3590ff38ad6bec9a63f9'
'rsus_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_195001-204912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r3i1p1f1/Amon/rsus/gr1/v20180701/rsus_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_195001-204912.nc' 'SHA256' 'fe7767d5aadead1a082027f232753992cbf88b13d4aed713915458e34806c085'
'rsus_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_205001-209912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r3i1p1f1/Amon/rsus/gr1/v20180701/rsus_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_205001-209912.nc' 'SHA256' '034a090bcbc595fec5ea175802483dc9200b0ad9a1cfd575b752f14d6fe84a50'
'rsus_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_210001-210012.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r3i1p1f1/Amon/rsus/gr1/v20180701/rsus_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_210001-210012.nc' 'SHA256' '2934581f39e09b1de6ce4935dcabd6020e08566cabadc57e97a2b552f9ef3276'
'rsut_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_185001-194912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r3i1p1f1/Amon/rsut/gr1/v20180701/rsut_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_185001-194912.nc' 'SHA256' '3a55965eb87f42026e44b0cf79c018e9746145ace452bda584f7684e041842d0'
'rsut_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_195001-204912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r3i1p1f1/Amon/rsut/gr1/v20180701/rsut_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_195001-204912.nc' 'SHA256' 'd7bbdbf92909e82df376e217408624d78f37241be48d24cb4ec45af63724722f'
'rsut_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_205001-209912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r3i1p1f1/Amon/rsut/gr1/v20180701/rsut_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_205001-209912.nc' 'SHA256' 'b7dc2bd3f425d58b446daf5e8224e2931a087e6f79655116c623a26f8e2dcbdb'
'rsut_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_210001-210012.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r3i1p1f1/Amon/rsut/gr1/v20180701/rsut_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_210001-210012.nc' 'SHA256' '4ec00a168b95e7fffe048c6104294fc98530bc7415b30f775750772e26f5f956'
'rsutcs_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_185001-194912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r3i1p1f1/Amon/rsutcs/gr1/v20180701/rsutcs_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_185001-194912.nc' 'SHA256' '7a3ed366577c903ae61854c6524d3d1dcee2b18c1f808735b0c3415846751b76'
'rsutcs_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_195001-204912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r3i1p1f1/Amon/rsutcs/gr1/v20180701/rsutcs_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_195001-204912.nc' 'SHA256' '6d1e71de04517e0a642475f7f444684dde0c20036336bb4223984e9ba35b31e3'
'rsutcs_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_205001-209912.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r3i1p1f1/Amon/rsutcs/gr1/v20180701/rsutcs_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_205001-209912.nc' 'SHA256' '1db5fc3cbbfa7b541500fc1dc8e10f8ef1c94e82579d9eb9e64e5bd8338b129d'
'rsutcs_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_210001-210012.nc' 'http://esgdata.gfdl.noaa.gov/thredds/fileServer/gfdl_dataroot4/RFMIP/NOAA-GFDL/GFDL-CM4/piClim-histaer/r3i1p1f1/Amon/rsutcs/gr1/v20180701/rsutcs_Amon_GFDL-CM4_piClim-histaer_r3i1p1f1_gr1_210001-210012.nc' 'SHA256' '73002091a92fcaa62ab300f53a908817751ee4c78332f854ce19f26141476e0a'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 104 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"

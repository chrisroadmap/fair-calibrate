#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by esg-dn1.nsc.liu.se - 2023/02/21 12:50:24
# Search URL: http://esg-dn1.nsc.liu.se/esg-search/wget/?distrib=false&dataset_id=CMIP6.RFMIP.EC-Earth-Consortium.EC-Earth3.piClim-control.r2i1p1f1.Amon.rlut.gr.v20211201|esg-dn2.nsc.liu.se
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='http://esg-dn1.nsc.liu.se/esg-search/wget/?distrib=false&dataset_id=CMIP6.RFMIP.EC-Earth-Consortium.EC-Earth3.piClim-control.r2i1p1f1.Amon.rlut.gr.v20211201|esg-dn2.nsc.liu.se'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_185001-185012.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_185001-185012.nc' 'SHA256' 'ab901c6e5efd3f43f15904ffdb2b050d14811b61d051c13d75372058d613c164'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_185101-185112.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_185101-185112.nc' 'SHA256' '1dbe187d3c0f5d20834b8abc8979c75964571f57caff94fd8a7df4ccd7133058'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_185201-185212.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_185201-185212.nc' 'SHA256' 'f05ec874ed8fbdddd6f312a66f3e4721b079e66ed2fdd81271022c0d0353959a'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_185301-185312.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_185301-185312.nc' 'SHA256' 'ec2ae86ed5a535cce397c231d2ec86f475d0b0c3c45d9f5a57aa2b376bf2d24b'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_185401-185412.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_185401-185412.nc' 'SHA256' 'f43e7b52e8fe85b26167c1235b3c1f98e76881f29a300fa82ee044f5c1ac5d3f'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_185501-185512.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_185501-185512.nc' 'SHA256' 'cd8f9985d9c90cccc625eba42f5655df3b181a398a8a291ef3c8c9f614b0a948'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_185601-185612.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_185601-185612.nc' 'SHA256' 'b66f74e4449fa8071b35d79694d14696f5bf94fa0e42c6d3be462e3fd5e48b65'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_185701-185712.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_185701-185712.nc' 'SHA256' '35872cb74eb7d6e3879b4595f38b39fc8d7bd2596d39661839d7a0a939815204'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_185801-185812.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_185801-185812.nc' 'SHA256' 'e99e685c9820de065de2a3ffe9bb9386504d9a565ec8b765961e2ba668bb3d36'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_185901-185912.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_185901-185912.nc' 'SHA256' 'd3f9b34bf52c442159a85aae537b63ddf19d3456aaa857381a16b9072e0ae0c7'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_186001-186012.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_186001-186012.nc' 'SHA256' '970d999fd524924915e953015a9cfe5801a1cd8d1bc546b8b13703d95a641f23'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_186101-186112.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_186101-186112.nc' 'SHA256' 'bcfdbf94812536e3f49d6669c47d396a4153c88f6535f811a228e36158469367'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_186201-186212.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_186201-186212.nc' 'SHA256' 'b3ae129699c09ebddc91fd2e8d9b4808dc162f107cd24a6da916f33373146e90'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_186301-186312.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_186301-186312.nc' 'SHA256' '05404f83980e6de13f066120a8b02293b4ee553da2e3ec31778f4f5a8dfe1ec4'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_186401-186412.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_186401-186412.nc' 'SHA256' '2ed29470c8f7ca68604254bda58efd99b158dbb8db1919c31cd4cd96c9718e80'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_186501-186512.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_186501-186512.nc' 'SHA256' '325a2883c8e34a6f190142ceefc405316f414561068a964c7088a261da4b9006'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_186601-186612.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_186601-186612.nc' 'SHA256' '8326af19abd803b9c23f2458395137cd73062924b3f4fd1b7fdb6a1c66e463aa'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_186701-186712.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_186701-186712.nc' 'SHA256' '0c94489f157676c5e06ea2285862b6fd3452ecc827252792a1447f32ae174d58'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_186801-186812.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_186801-186812.nc' 'SHA256' 'cd738b25c42d50c0c4f255767ef280e755c5fb22d5e03c84f080b939e07dff10'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_186901-186912.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_186901-186912.nc' 'SHA256' '860a70d8a36bbe2b481061e5606460a7daf89b4ff31cceb8af1fcd9e52db5692'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_187001-187012.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_187001-187012.nc' 'SHA256' 'b3b3d261ae18167fc69cd5c366d7e1fcaf4bff683da74cac99a1cc1f716926fe'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_187101-187112.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_187101-187112.nc' 'SHA256' '3643a614c2b1a67ed3d476377ac077415ad8b3bb75423b08b205315201dcbd43'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_187201-187212.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_187201-187212.nc' 'SHA256' '02a87b304dcab29eea043a5cec7b010f3fcc61ccf35619420590e6c8b3452cb9'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_187301-187312.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_187301-187312.nc' 'SHA256' '37fcf8e298627f9d975adb7d1c968538f3a9577ee21129136e497152d188bcd8'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_187401-187412.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_187401-187412.nc' 'SHA256' '5aad46d7e0214e64074b0d227d540c861e522a5521d28084ad641d6ed2f2f35c'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_187501-187512.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_187501-187512.nc' 'SHA256' '2518127d13e17975f24f213ab78a2d19e3b144ee98908061efc90f6f22bb7387'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_187601-187612.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_187601-187612.nc' 'SHA256' '9ec96f6b8bb0a547ada7eea5d787a4dfe8379c98b2b974a684ce3946f2b20e82'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_187701-187712.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_187701-187712.nc' 'SHA256' '027b0b65b421be28625062b8ed5e1ec131072b641122e9470f82b79873675ce6'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_187801-187812.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_187801-187812.nc' 'SHA256' '8957f538ac77a0d470d4091af987de3a28c7866254cfe4f2241ffaf1fa76cf7e'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_187901-187912.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_187901-187912.nc' 'SHA256' '96df93b4c13f6fb5dd9552fe315ef28666c115290e70adf74ba37a291e7694eb'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_188001-188012.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_188001-188012.nc' 'SHA256' 'b7f90a36d4a323558c11d2d683f8e0f886a4741bc8b063f877fcf5490650b0d0'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_188101-188112.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_188101-188112.nc' 'SHA256' 'a44a989465f714b45caaa17ffc463d09e8cdce45fe73dc6f0a2e5dc2a00749db'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_188201-188212.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_188201-188212.nc' 'SHA256' 'e83476b6a5b5c288d6065cbba22c99eefde7162f01aa54a1ebba0c112202b322'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_188301-188312.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_188301-188312.nc' 'SHA256' '75df639bbadf4d1deb91b203fd527fc73f86e10e6cbf3ac7ce5f5ad18e8e1292'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_188401-188412.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_188401-188412.nc' 'SHA256' '742617faed92c718fe789184a8862a32de60f537ef1860df23bf0de5585338d8'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_188501-188512.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_188501-188512.nc' 'SHA256' '0afcfd8e8dffc940f66a11c7c9cf620c3bdb37b0c4e7c99eeec14ce8c2b1e25e'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_188601-188612.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_188601-188612.nc' 'SHA256' 'c1eb00353d517a17e492b08d6cd55305f6288ca1ab992d8fba7c45b75dd72f16'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_188701-188712.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_188701-188712.nc' 'SHA256' 'f51f1c934d7a85461fc20eabdc72b99f8414486f6166e8772cb74675d56c3307'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_188801-188812.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_188801-188812.nc' 'SHA256' '66e5ebdf0875c5cd357a8eb6d7f9dfabc9ce53216486a17b524e128e01e3375f'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_188901-188912.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_188901-188912.nc' 'SHA256' 'c11d1c8d1369f620bffd15d895dc785e5ec54fbda92ea661f1196d47fc3dbdaa'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_189001-189012.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_189001-189012.nc' 'SHA256' '2c7ea3b9e9f0fc102499e638b00f8d251c8d5585148a2a1ff85c021089c9492a'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_189101-189112.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_189101-189112.nc' 'SHA256' 'a3d73f2034cb5bdec975ac4ee0f8e7e64df69fc0aedbb48eb0a00b854b92129a'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_189201-189212.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_189201-189212.nc' 'SHA256' 'c39b05f278e73645e1066a23d01e0d48525963c6c45488f6d90111c5d33f9772'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_189301-189312.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_189301-189312.nc' 'SHA256' '89b6a28fb671bb632917e9cc5fa26becfece395abc32dfc87a98dd161b598847'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_189401-189412.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_189401-189412.nc' 'SHA256' 'ea4f2e0b41bf87349c105f510e83c111e7c611b4fd348dc96aa7e944dba4bba8'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_189501-189512.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_189501-189512.nc' 'SHA256' '260e1a42026657cb17132e73b747f698d980b455ec380a52f1997f143f644ab5'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_189601-189612.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_189601-189612.nc' 'SHA256' '57d911c073086488558d3e4255355fdcd0cf9ba980320c764bab0bf3389d6a9a'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_189701-189712.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_189701-189712.nc' 'SHA256' 'a816640b0728faacd3b10ab98ad220b055f10a429659eb6c89ed89f49e1a06cd'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_189801-189812.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_189801-189812.nc' 'SHA256' 'a6b96c13241a208e38ce3483cfa0a9db9abb309e617bd6192b9a32ccfed6d550'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_189901-189912.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_189901-189912.nc' 'SHA256' '9a7f9a20cf68e493888a194af2d215b1a3c23244f275de342347b4a78544f11a'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_190001-190012.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_190001-190012.nc' 'SHA256' '86c478b03f677441f61b2464b2952b7254d56ac3a8f3648c7fe1959fb4c98819'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_190101-190112.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_190101-190112.nc' 'SHA256' '1c0751b43caef3ab9965ed40c04fd515737c45e254c904dd4a9055b161ddca0a'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_190201-190212.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_190201-190212.nc' 'SHA256' '276bcf793180640e3c0fc1ab968a632a5436e4469ac3e3f2b4c01e7800c9cbb2'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_190301-190312.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_190301-190312.nc' 'SHA256' '1f806a1fdd1ff235b74356f52705d66fc1e82275b5672b106206397f21bbf72b'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_190401-190412.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_190401-190412.nc' 'SHA256' '041b691d62b4a622a31da980ed073a263263f265eeb4316d9ee7c05013884f70'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_190501-190512.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_190501-190512.nc' 'SHA256' 'aae50ac349c200d3d2fff4178272664e3e54c665f8c44b59095af9fd4844596f'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_190601-190612.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_190601-190612.nc' 'SHA256' '7c0fd71e3766d53d87aea631bbbe241b999a9b43019a718c0a67b1961183d428'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_190701-190712.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_190701-190712.nc' 'SHA256' '617b75e7062519faf2de86d511eb275b60c6640e34d5f554342bceb608aa4825'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_190801-190812.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_190801-190812.nc' 'SHA256' '0101f870441c44a2f5b02c5322cefa131d87355bf814b9fd95fcd09b6564f496'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_190901-190912.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_190901-190912.nc' 'SHA256' '5961c00ccd2992604dafc713cbe15e3bb259330b1f3dc5680a3c2cbc1e8d5bd5'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_191001-191012.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_191001-191012.nc' 'SHA256' '6d6ab5ac40f1fe61da37b018e71c2ceef2ccd3266d2578b71376f11f55ce86b2'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_191101-191112.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_191101-191112.nc' 'SHA256' 'da3ca65d47880d2b806e52d18c2c121d1a8a74659a10a051f542fdfbe02db9ca'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_191201-191212.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_191201-191212.nc' 'SHA256' 'cf30352834a0f25f06c4e4ba9ca7967ed262d9d83e0bbecaff0b9f819d04e692'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_191301-191312.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_191301-191312.nc' 'SHA256' '88216ed448145db0375779a90ba7ceaf55b67948bab548fdb4697b7f2ed5e2d7'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_191401-191412.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_191401-191412.nc' 'SHA256' '59f34fc7ce9776af6eea87fc602cd06a8eef8901e6c3fd1f249ab67e36adebaf'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_191501-191512.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_191501-191512.nc' 'SHA256' '429ee09018e1817dda8fae3edf37bb04232d37ef0cd53c265512e71de3aea2f0'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_191601-191612.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_191601-191612.nc' 'SHA256' '31a857dd7e8353bb700727f346b683412d2ff6f5587950daeb7b7707f2ea81a5'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_191701-191712.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_191701-191712.nc' 'SHA256' '1b9a33b0c46281d7d305d5f5fc343986db39a8b32033cde55296733dd98c480d'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_191801-191812.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_191801-191812.nc' 'SHA256' '84aa66e702babac2fe20addf5f77450aff2d62d0332d5ad8491dec1496aa72fd'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_191901-191912.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_191901-191912.nc' 'SHA256' 'a7fc22e0caa5dbba6856650311587611b427bba0ea6c83973d6abfe993408060'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_192001-192012.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_192001-192012.nc' 'SHA256' 'b89b3509b053a2d128744d7e77b3a3d9249dadea542974f4883d22a5ed61f9e0'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_192101-192112.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_192101-192112.nc' 'SHA256' '97495157e788b18b6e17c03fac6722cd6fbba6f1c1af336c0dccb5eaa87ac213'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_192201-192212.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_192201-192212.nc' 'SHA256' '1d2cecc81384975b8332acf020210c42b976567494010e40566b0c005baf29c8'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_192301-192312.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_192301-192312.nc' 'SHA256' '3558c6079313701da3ac307a27ed7f09f02ce5eef7dfad24fccf383722d4fdcb'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_192401-192412.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_192401-192412.nc' 'SHA256' '523b9a490ea6b2791ebdd95209a81c14267a57970660d289171053300bdaab75'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_192501-192512.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_192501-192512.nc' 'SHA256' '20852336f021e20954585fbc19d2d3d4204b742cf97910d539c88951cacc0c43'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_192601-192612.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_192601-192612.nc' 'SHA256' '968c2a5b6396b2332359e7ff95c5fb06f0d1eec5ae58b4e039b3aa129ad6adfc'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_192701-192712.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_192701-192712.nc' 'SHA256' 'afe8632606507729ba0f47450ed80e3a831a7a52247f5ab654ae6442b857ad14'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_192801-192812.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_192801-192812.nc' 'SHA256' '737664b9b223cb9787d1aa0f87377b61915d3310725157ebdddd3b0ee0b0fa61'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_192901-192912.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_192901-192912.nc' 'SHA256' '9e6782b07d1b0a30f89c3327c741f2340eba5410a042541e29708a6f0bb7e98b'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_193001-193012.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_193001-193012.nc' 'SHA256' '9de4f03a245e305fb9781d06b1ad443ac714bca9558db05b78716481d4a255ce'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_193101-193112.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_193101-193112.nc' 'SHA256' 'f756c5c9da82ce2a1a0432f34f6019ca33684a0d2eb231902b5997587bc36a82'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_193201-193212.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_193201-193212.nc' 'SHA256' '388444a790b3513a18bb5001db6981f772492407ee0aa611b9d7ff1e385ca552'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_193301-193312.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_193301-193312.nc' 'SHA256' '078408295d692ce7f6e6f1bbb67cb4d3c75e7c241cb47faca8fecae78c5992d6'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_193401-193412.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_193401-193412.nc' 'SHA256' '7cce1cfdb4acde0dd2e56671fe6dad21d7cda0e0827181e971bfe31a50d3473a'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_193501-193512.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_193501-193512.nc' 'SHA256' '563046555d9db8d693a7c7a2a100c769232a375a6c96121e7d63c327c258133a'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_193601-193612.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_193601-193612.nc' 'SHA256' '0ae74330a8957fd2afd77bf1168f0b0f7012fc7f1e4f6c004a57edafb25aca46'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_193701-193712.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_193701-193712.nc' 'SHA256' 'ca6a951c5d889d1e7228602fa83e35a9c3b0bb0deeb7841c6092118a562c194c'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_193801-193812.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_193801-193812.nc' 'SHA256' '6c11d0409202c1730a3eeb32176752f235aa0732e6edab60e4e6b43c6c910321'
'rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_193901-193912.nc' 'http://esg-dn2.nsc.liu.se/thredds/fileServer/esg_dataroot2/cmip6data/CMIP6/RFMIP/EC-Earth-Consortium/EC-Earth3/piClim-control/r2i1p1f1/Amon/rlut/gr/v20211201/rlut_Amon_EC-Earth3_piClim-control_r2i1p1f1_gr_193901-193912.nc' 'SHA256' 'ec46fc650d1cbf91c25d26311caeea5ff12eb86ed1833a0b510513428240b4ce'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 90 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
